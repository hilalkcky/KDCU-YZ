# -*- coding: utf-8 -*-
"""Model2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j9FxU1Q3IgqV13Q9au1X-yWupkhIPh43
"""

!pip install tensorflow==2.15.0
!pip install h5py==3.10.0
!pip install --upgrade jax jaxlib

import tensorflow as tf
import pandas as pd
import string
df=pd.read_csv("/content/data.csv")
java=df["CS"]
def remove_punctuation(text):
    if isinstance(text, str):
        return text.translate(str.maketrans('', '', string.punctuation))
    return text

# Sütundaki noktalama işaretlerini temizle
df["Clean_Cs"] = df["CS"].apply(remove_punctuation)

df=df.drop("Java",axis=1)
# Temizlenmiş verilerle yeni bir CSV dosyası oluştur
df.to_csv("clean_cs.csv", index=False)

import tensorflow as tf
import pandas as pd
import string
df=pd.read_csv("/content/data.csv")
java=df["Java"]
def remove_punctuation(text):
    if isinstance(text, str):
        return text.translate(str.maketrans('', '', string.punctuation))
    return text

# Sütundaki noktalama işaretlerini temizle
df["Clean_Java"] = df["Java"].apply(remove_punctuation)

df=df.drop("CS",axis=1)
# Temizlenmiş verilerle yeni bir CSV dosyası oluştur
df.to_csv("clean_java.csv", index=False)

from google.colab import files
files.download('/content/clean_cs.csv')
files.download('/content/clean_java.csv')

import pandas as pd
df2=pd.read_csv("/content/clean_java.csv")

df2.head()

import pandas as pd
df_cs=pd.read_csv("/content/clean_cs.csv")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report
import pickle

X = df_cs['Clean_Cs']  # kaynak kolon
y = df_cs['CS']  # hedef kolon

# Eğitim ve test setlerine ayırıldı. Ve ardından aşırı ram kullanımını önlemek için small eğitim seti oluşturuldu
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train_small, _, y_train_small, _ = train_test_split(X_train, y_train, test_size=0.9, random_state=42)

#ilk olarak tfidvectorizer ardından randomforest modeli uygulandı
rf_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=5000)),
    ('clf', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Model eğitildi
rf_pipeline.fit(X_train_small, y_train_small)

y_pred = rf_pipeline.predict(X_test)


# Modeli kaydetme

with open('rf_cs.pkl', 'wb') as dosya:
    pickle.dump(rf_pipeline, dosya)

# tahminler yazdırılması için fonskiyon oluşturuldu
def predict_sentence(model, sentence):
    prediction = model.predict([sentence])
    return prediction[0]

from google.colab import files
files.download('/content/clean_cs.csv')

user_input = df_cs['Clean_Cs'][5]
prediction = predict_sentence(rf_pipeline, user_input)
print(f"Tahmin sonucu: {prediction}")